# Generated by Django 4.2 on 2025-09-14 01:01

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Avaliacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro', verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização', verbose_name='Atualizado em')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo no sistema', verbose_name='Ativo')),
                ('nota', models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Nota de 1 a 5', verbose_name='Nota')),
                ('comentario', models.TextField(blank=True, help_text='Comentário opcional sobre o atendimento', verbose_name='Comentário')),
                ('data_sessao', models.DateField(blank=True, help_text='Data da sessão avaliada', null=True, verbose_name='Data da Sessão')),
                ('recomenda', models.BooleanField(default=True, help_text='Cliente recomendaria este terapeuta', verbose_name='Recomenda')),
                ('verificada', models.BooleanField(default=False, help_text='Avaliação verificada pela plataforma', verbose_name='Avaliação Verificada')),
            ],
            options={
                'verbose_name': 'Avaliação',
                'verbose_name_plural': 'Avaliações',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Cidade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome da Cidade')),
            ],
            options={
                'verbose_name': 'Cidade',
                'verbose_name_plural': 'Cidades',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Contato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro', verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização', verbose_name='Atualizado em')),
                ('nome', models.CharField(help_text='Nome de quem está entrando em contato', max_length=100, verbose_name='Nome')),
                ('email', models.EmailField(help_text='E-mail para resposta', max_length=254, verbose_name='E-mail')),
                ('telefone', models.CharField(blank=True, help_text='Telefone para contato', max_length=20, verbose_name='Telefone')),
                ('assunto', models.CharField(help_text='Assunto da mensagem', max_length=150, verbose_name='Assunto')),
                ('mensagem', models.TextField(help_text='Mensagem detalhada', verbose_name='Mensagem')),
                ('status', models.CharField(choices=[('enviado', 'Enviado'), ('lido', 'Lido'), ('respondido', 'Respondido'), ('arquivado', 'Arquivado')], default='enviado', help_text='Status do contato', max_length=20, verbose_name='Status')),
                ('ip_origem', models.GenericIPAddressField(blank=True, help_text='IP de onde foi enviado', null=True, verbose_name='IP de Origem')),
            ],
            options={
                'verbose_name': 'Contato',
                'verbose_name_plural': 'Contatos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Especialidade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro', verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização', verbose_name='Atualizado em')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo no sistema', verbose_name='Ativo')),
                ('nome', models.CharField(help_text='Nome da terapia/especialidade (ex: Massoterapia, Reiki)', max_length=100, unique=True, verbose_name='Nome da Especialidade')),
                ('slug', models.SlugField(blank=True, help_text='URL amigável (será gerado automaticamente)', max_length=120, unique=True, verbose_name='Slug')),
                ('descricao_curta', models.TextField(help_text='Descrição breve para exibição em cards', max_length=200, verbose_name='Descrição Curta')),
                ('descricao_completa', models.TextField(help_text='Descrição detalhada da terapia', verbose_name='Descrição Completa')),
                ('icone', models.ImageField(blank=True, help_text='Ícone da especialidade (64x64px recomendado)', null=True, upload_to='especialidades/icones/', verbose_name='Ícone')),
                ('cor_destaque', models.CharField(default='#0B5259', help_text='Cor hex para cards e destaques', max_length=7, verbose_name='Cor de Destaque')),
                ('ordem', models.PositiveIntegerField(default=0, help_text='Ordem de exibição nas listagens', verbose_name='Ordem de Exibição')),
                ('destaque', models.BooleanField(default=False, help_text='Exibir na página principal', verbose_name='Em Destaque')),
            ],
            options={
                'verbose_name': 'Especialidade',
                'verbose_name_plural': 'Especialidades',
                'ordering': ['ordem', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='Estado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome do Estado')),
                ('sigla', models.CharField(max_length=2, unique=True, verbose_name='Sigla')),
            ],
            options={
                'verbose_name': 'Estado',
                'verbose_name_plural': 'Estados',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Terapeuta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro', verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização', verbose_name='Atualizado em')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo no sistema', verbose_name='Ativo')),
                ('nome_completo', models.CharField(help_text='Nome completo do terapeuta', max_length=150, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Nome Completo')),
                ('nome_exibicao', models.CharField(help_text='Nome para exibição pública (ex: Ana Silva)', max_length=100, verbose_name='Nome de Exibição')),
                ('slug', models.SlugField(blank=True, help_text='URL amigável do perfil', max_length=120, unique=True, verbose_name='Slug')),
                ('email_profissional', models.EmailField(help_text='E-mail para contato profissional', max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='E-mail Profissional')),
                ('telefone', models.CharField(help_text='Telefone para contato', max_length=20, validators=[django.core.validators.RegexValidator(message="Formato: '+999999999'. Até 15 dígitos.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Telefone')),
                ('whatsapp', models.CharField(blank=True, help_text='Número do WhatsApp (opcional)', max_length=20, validators=[django.core.validators.RegexValidator(message="Formato: '+999999999'. Até 15 dígitos.", regex='^\\+?1?\\d{9,15}$')], verbose_name='WhatsApp')),
                ('bairro', models.CharField(blank=True, help_text='Bairro onde atua', max_length=100, verbose_name='Bairro')),
                ('endereco', models.TextField(blank=True, help_text='Endereço completo (opcional para privacidade)', verbose_name='Endereço')),
                ('registro_profissional', models.CharField(blank=True, help_text='Número do registro profissional (CRT, etc.)', max_length=50, verbose_name='Registro Profissional')),
                ('formacao', models.TextField(help_text='Formação acadêmica e cursos', verbose_name='Formação')),
                ('experiencia_anos', models.PositiveIntegerField(default=0, help_text='Anos de experiência profissional', verbose_name='Anos de Experiência')),
                ('tipos_sessao', models.JSONField(default=list, help_text='Lista de tipos: presencial, online, domicilio', verbose_name='Tipos de Sessão')),
                ('tipo_perfil', models.CharField(choices=[('individual', 'Individual'), ('espacos', 'Espaços')], default='individual', help_text='Individual ou Espaços', max_length=20, verbose_name='Tipo de Perfil')),
                ('para_quem', models.CharField(choices=[('qualquer_um', 'Qualquer um'), ('adultos', 'Adultos'), ('criancas', 'Crianças'), ('idosos', 'Idosos'), ('casais', 'Casais'), ('grupos', 'Grupos')], default='qualquer_um', help_text='Público-alvo dos atendimentos', max_length=20, verbose_name='Para Quem')),
                ('acessibilidade', models.BooleanField(default=False, help_text='Local/atendimento com acessibilidade', verbose_name='Acessibilidade')),
                ('bio_curta', models.TextField(help_text='Descrição breve para listagens (máx 300 chars)', max_length=300, verbose_name='Bio Curta')),
                ('bio_completa', models.TextField(help_text='Descrição detalhada do perfil profissional', verbose_name='Bio Completa')),
                ('metodologia', models.TextField(blank=True, help_text='Descrição da metodologia de trabalho', verbose_name='Metodologia')),
                ('foto_perfil', models.ImageField(blank=True, help_text='Foto profissional (400x400px recomendado)', null=True, upload_to='terapeutas/fotos/', verbose_name='Foto de Perfil')),
                ('foto_capa', models.ImageField(blank=True, help_text='Foto para capa do perfil (1200x400px)', null=True, upload_to='terapeutas/capas/', verbose_name='Foto de Capa')),
                ('verificado', models.BooleanField(default=False, help_text='Terapeuta verificado pela plataforma', verbose_name='Verificado')),
                ('destaque', models.BooleanField(default=False, help_text='Exibir na home como destaque', verbose_name='Em Destaque')),
                ('premium', models.BooleanField(default=False, help_text='Conta premium com benefícios', verbose_name='Premium')),
                ('data_verificacao', models.DateTimeField(blank=True, help_text='Quando foi verificado', null=True, verbose_name='Data de Verificação')),
                ('visualizacoes', models.PositiveIntegerField(default=0, help_text='Número de visualizações do perfil', verbose_name='Visualizações')),
                ('total_contatos', models.PositiveIntegerField(default=0, help_text='Número de contatos recebidos', verbose_name='Total de Contatos')),
                ('cidade', models.ForeignKey(help_text='Cidade onde atua', null=True, on_delete=django.db.models.deletion.SET_NULL, to='terapeutas.cidade', verbose_name='Cidade')),
            ],
            options={
                'verbose_name': 'Terapeuta',
                'verbose_name_plural': 'Terapeutas',
                'ordering': ['-destaque', '-premium', '-verificado', 'nome_exibicao'],
            },
        ),
        migrations.CreateModel(
            name='TerapeutaEspecialidade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro', verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização', verbose_name='Atualizado em')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o registro está ativo no sistema', verbose_name='Ativo')),
                ('preco_sessao', models.DecimalField(blank=True, decimal_places=2, help_text='Preço em reais (opcional)', max_digits=10, null=True, verbose_name='Preço por Sessão')),
                ('duracao_sessao', models.PositiveIntegerField(blank=True, help_text='Duração em minutos', null=True, verbose_name='Duração da Sessão (min)')),
                ('certificacao', models.CharField(blank=True, help_text='Certificações específicas nesta especialidade', max_length=200, verbose_name='Certificação')),
                ('anos_experiencia', models.PositiveIntegerField(default=0, help_text='Anos de experiência nesta especialidade', verbose_name='Anos de Experiência')),
                ('observacoes', models.TextField(blank=True, help_text='Observações específicas sobre esta especialidade', verbose_name='Observações')),
                ('principal', models.BooleanField(default=False, help_text='Esta é a especialidade principal do terapeuta', verbose_name='Especialidade Principal')),
                ('especialidade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='terapeutas.especialidade', verbose_name='Especialidade')),
                ('terapeuta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='terapeutas.terapeuta', verbose_name='Terapeuta')),
            ],
            options={
                'verbose_name': 'Especialidade do Terapeuta',
                'verbose_name_plural': 'Especialidades dos Terapeutas',
                'ordering': ['-principal', 'especialidade__nome'],
            },
        ),
        migrations.AddField(
            model_name='terapeuta',
            name='especialidades',
            field=models.ManyToManyField(help_text='Especialidades que o terapeuta oferece', through='terapeutas.TerapeutaEspecialidade', to='terapeutas.especialidade', verbose_name='Especialidades'),
        ),
        migrations.AddField(
            model_name='terapeuta',
            name='user',
            field=models.OneToOneField(help_text='Usuário Django relacionado', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário'),
        ),
        migrations.AddIndex(
            model_name='especialidade',
            index=models.Index(fields=['destaque', 'is_active'], name='terapeutas__destaqu_1d8567_idx'),
        ),
        migrations.AddIndex(
            model_name='especialidade',
            index=models.Index(fields=['ordem'], name='terapeutas__ordem_7ab510_idx'),
        ),
        migrations.AddField(
            model_name='contato',
            name='especialidade_interesse',
            field=models.ForeignKey(blank=True, help_text='Especialidade que despertou interesse', null=True, on_delete=django.db.models.deletion.SET_NULL, to='terapeutas.especialidade', verbose_name='Especialidade de Interesse'),
        ),
        migrations.AddField(
            model_name='contato',
            name='terapeuta',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contatos_recebidos', to='terapeutas.terapeuta', verbose_name='Terapeuta'),
        ),
        migrations.AddField(
            model_name='cidade',
            name='estado',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cidades', to='terapeutas.estado', verbose_name='Estado'),
        ),
        migrations.AddField(
            model_name='avaliacao',
            name='cliente',
            field=models.ForeignKey(help_text='Cliente que fez a avaliação', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Cliente'),
        ),
        migrations.AddField(
            model_name='avaliacao',
            name='terapeuta',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avaliacoes', to='terapeutas.terapeuta', verbose_name='Terapeuta'),
        ),
        migrations.AlterUniqueTogether(
            name='terapeutaespecialidade',
            unique_together={('terapeuta', 'especialidade')},
        ),
        migrations.AddIndex(
            model_name='terapeuta',
            index=models.Index(fields=['verificado', 'is_active'], name='terapeutas__verific_c38fa3_idx'),
        ),
        migrations.AddIndex(
            model_name='terapeuta',
            index=models.Index(fields=['destaque', 'is_active'], name='terapeutas__destaqu_a38424_idx'),
        ),
        migrations.AddIndex(
            model_name='terapeuta',
            index=models.Index(fields=['premium', 'is_active'], name='terapeutas__premium_d914fc_idx'),
        ),
        migrations.AddIndex(
            model_name='terapeuta',
            index=models.Index(fields=['cidade', 'is_active'], name='terapeutas__cidade__8466f0_idx'),
        ),
        migrations.AddIndex(
            model_name='contato',
            index=models.Index(fields=['terapeuta', 'status'], name='terapeutas__terapeu_cb901b_idx'),
        ),
        migrations.AddIndex(
            model_name='contato',
            index=models.Index(fields=['status', 'created_at'], name='terapeutas__status_46b3e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cidade',
            unique_together={('nome', 'estado')},
        ),
        migrations.AddIndex(
            model_name='avaliacao',
            index=models.Index(fields=['terapeuta', 'is_active'], name='terapeutas__terapeu_b73583_idx'),
        ),
        migrations.AddIndex(
            model_name='avaliacao',
            index=models.Index(fields=['nota', 'is_active'], name='terapeutas__nota_7a35ee_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='avaliacao',
            unique_together={('terapeuta', 'cliente')},
        ),
    ]
